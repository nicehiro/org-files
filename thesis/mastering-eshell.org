#+TITLE: Mastering Eshell
#+OPTIONS: toc:nil
#+DATE: 2020-04-03
#+SETUPFILE: ~/.emacs.d/org-templates/level-1.org

本文翻译自 [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell]]，作者为 Mickey Peterson。

Emacs 中有很多终端模拟器，但没有一款可以像 Eshell 一样有如此的通用性和与 Emacs 的整合性。Eshell 全部源码使用 ELisp 所写，并且实现了许多 GNU CoreUtils 和 Bash 的许多命令。因此，Eshell 的实现基本上与在其他 Shell 中的体验完全一样。

* Overview
与 Emacs 中其他 Shell 不同，Eshell 的 Major Mode 并不是直接继承于与 Emacs 中低等进程交互的模式 —— =comint-mode= 。由于 Eshell 不是一个低等进程，所以 Eshell 不需要使用 comint；但不使用 comint，就意味着 =comint-mode= 实现的 =hooks= 和 =routines= 不能在 Eshell 中使用。

然而， =comint-mode= 中几乎所有的命令在 Eshell 中都被重新实现了一遍，而且大部分都用着同一套快捷键，但仍然有一些功能没有被 Eshell 实现，比如 =comint-history-isearch-backward-regexp= 等。Eshell 可以工作在任何你 Emacs 运行的平台上，因为 Eshell 与一层由 Emacs-Lisp/C 所实现的中间件交互，这层中间件负责和底层的 OS 交互。这个中间件也支持 Eshell 使用 TRAMP 编辑远程文件。

鉴于 Emacs 的 UNIX 起源，Eshell 的实现模仿了传统的 UNIX Shell，比如 Bash 和其他 GNU 工具链。如果你是 Windows 用户，这将是个好消息，因为你不再需要为使用 cygwin 而烦恼了。事实上，Eshell 的 Windows 支持比 cygwin 好的多的多。Eshell 天生支持 Windows/MS-DOS 的盘符路径。

尽管 Eshell 相比其他 Shell 来说有很多优势，但我仍然想指明一些令人困惑的点：
- Eshell 不是一个终端模拟器。它并不是和 Shell 进行交互，因为它就是 Shell。它所实现的所有功能，包括在屏幕上显示字符，包括从文件夹获取内容，都是通过 Emacs，然后由 Emacs 与操作系统交互实现的。
- 由于 Eshell 与其他进程进行对话的方式（尤其是异步进程），它对缓冲文本的处理方式以及中断的工作方式可能存在问题。
- Eshell 不直接支持交互式程序，例如 =top= 。必须告诉 Eshell 在单独的 =anterm= 实例中启动它们。
- 它不是 bash，也不是 zsh，更不是 csh，尽管它的诞生受到了上诉很大的启发，但也不要这样对待它。为了有效的使用 Eshell，最好而方法是把它当作完全陌生的 Shell 来对待。

* Commands
Eshell 能够调用 Emacs 中几乎所有的 elisp 函数，这种灵活性是无与伦比的；没有任何 Shell 可以近似实现 Eshell 的功能。Emacs 鼓励用户在 Eshell 中使用 elisp 函数解决问题。如果你想要打开一个文件 =foobar.txt= ，你只需要调用 =find-file foobar.txt= ，Emacs 会自动使用 Elisp 调用 =(find-file "foobar.txt")= ，然后为你打开那个文件。

* Technical Details
Eshell 中执行的命令都有执行的先后顺序，这是输入的命令必须通过的一个有序列表，用以确定 Eshell 中那个部分来执行它。如果列表中没有任何内容可以执行输入的命令，那么就会提示输入的命令无效。

假设当前输入的命令为 =cp= ，那么执行的顺序为：
1. 运行 =cp= 命令的全路径
2. 查找命令前缀，=eshell-explicit-command-char= （默认为 *），如果找到，则在搜索路径中查找此命令
3. 查找 shell 中定义的别名（=alias= 命令）
4. 在路径 =$PATH= （或者 =eshell-path-env=）中查找 =cp= 命令
5. 查找 Lisp 函数 =cp= 或者 elisp 函数 =eshell/cp=

变量 =eshell-prefer-lisp-functions= 使得内部 elisp 调用优先级高于外部调用。这意味着，如果这个变量设为 =t= ，那么 Eshell 会优先查找 elisp 函数。如果命令前缀已经被指定了，那么查找顺序也就会被忽略了。

* Built-In Commands
Eshell 有一些使用 Emacs-Lisp 实现的命令，这些命令模拟实现了真正的 GNU Coreutils 所拥有的大部分内容，这些命令被称为“别名函数”（Alias Functions）。

Eshell 只实现了实际命令提供的功能子集，但如果将未知参数传递给 Eshell，那它将自动执行实际命令。

以下命令是被 elisp 重写实现的：
=cat=, =cp=, =ls=, =cd=, =export=, =dirs=, =du=, =echo=, =env=, =kill=, =ln=, =mkdir=, =mv=, =alias=, =popd=, =pushd=, =pwd=, =rm=, =rmdir=, =time=, =umask=

由于非常重视坚持原始的 GNU 功能，因此这些模拟函数不会给你带来麻烦。

* Command Interception
Eshell 有很酷的机制，可以确保某些命令被截断，正确的传给 Emacs。比如，当你调用 =man ls= 时，可以使用 Emacs 内置的 =man= 工具格式化处理结果。这个功能在使用交互式命令的时候非常有用，否则，Emacs 将无法调用它们。

这个机制真正牛逼的地方在于处理复杂命令的时候，比如 =grep= 或者是 =diff= ，会直接截断，调用 Emacs 内置的很棒的 =grep= 和 =diff= 工具。这足以体现 Eshell 的强大。

以下命令是被截断到 Emacs 去实现的：
=agrep=, =diff=, =egrep=, =fgrep=, =glimpse=, =grep=, =info=, =jobs=, =locate=, =man=, =occur=, =su=, =sudo=, =whoami=

=su=, =sudo= 和 =whoami= 是 TRAMP 相关的命令，如果你远程连接一个 shell，它们也可以如期工作。

* Subshells
可以使用 =$()= 内联 elisp 调用并将其输出用作参数，就像在 bash 中一样。

* Useful Elisp Commands
Eshell 自带一些帮助函数，让你每天的 shell 生活舒服的不行不行的。这与 调用几乎所有 elisp 函数的 功能相结合，将意味着你的 shell 具有难以置信的灵活性。下面列的命令有些是专门为 Eshell 所写，其余的是我认为有用的 elisp 命令。

- =listify ARGS= 将参数字符串解析为 elisp 列表符号并将其打印出来。这足以处理 MS-DOS/Windows 和 POSIX 风格的参数语法。
- =addpath PATH= 将参数添加到 =$PATH= 环境变量中。如果没有参数添加，则会将当前 =PATH= 打印。
- =unset ENV-VAR= 取消绑定一个已存在的环境变量。
- =find-file FILE= 找到文件并在 Emacs 中打开。
- =dired DIRECTORY= 在 DIRECTORY 文件夹中打开 dired 缓存区。
- =calc-eval EXPR= 通过 Emacs 计算器运行表达式。
- =upcase STR/downcase STR= 将字符串大写或者小写转化。
- =vc-dir DIRECTORY= 返回当前文件夹的版本控制状态。
- =ediff-files FILE1 FILE2= 使用 Emacs 内置的 diff 工具检查两个文件的区别。

* Aliasing
别名在 Eshell 中和在其他 shell 中的用法大致相同，只不过除此之外，在 Eshell 你可以混用 elisp 和 Emacs 命令。命令 =alias= 的参数有 =alias-name= 和 =definition= 。=definition= 必须由单引号包裹。可以使用和其他 shell 中相同的参数引用方法：=$1= 表示第一个参数，=$2= 表示第二个参数，=$*= 表示所有参数，或者也可以完全省略它们，因为如果在定义中未引用它们，Eshell 会神奇的将它们附加到命令的末尾。

要删除别名，只需要省略 =definition= 参数，它将自动被删除。要列出所有别名，忽略两个参数即可。

Eshell 会将别名定义写入到 =eshell-aliases-file= 中，即 =~/.emacs.d/eshell/alias= 。

Eshell 另一个有趣的功能是 =auto-correcting aliasing= 。如果你多次输入一个错误命令（由 =eshell-bad-command-tolerance= 控制，默认为 3），Eshell 将自动生成一个别名指向它应该被使用命令上。如果你不喜欢这样，你可以将上诉控制变量值调大一些。

* Useful Examples
使用 =ff= 表示 =find-file= ：
#+BEGIN_SOURCE sh
alias ff 'find-file $1'
#+BEGIN_SOURCE

使用 =d= 表示 =dired= ：
#+BEGIN_SOURCE sh
alias d 'dired $1'
#+BEGIN_SOURCE

* Visual Commands
有些命令由于很复杂所以不能直接使用 Eshell 展示，需要一些特别的处理。比如 =top= 命令，无法在 Eshell 中直接展示。为了支持这些命令，当你调用 Eshell 认为可视的命令时，Eshell 将运行 =term= 会话。

查看 =eshell-visual-commands= 可以知道所有可视命令。

* Command History
Eshell 带有功能丰富的历史命令记录功能。由于 Eshell 不使用 =comint-mode= ，因此它没有所有历史记录功能，但大多数功能都已实现。

- =M-r / M-s= 使用正则表达式向后或者向前搜索命令。
- =M-p / M-n= 在命令历史列表中向前或者向后移动。
- =C-p / C-n= 移动到 Eshell 中前一个或者后一个命令。
- =C-c M-r / C-c M-s= 已当前输入作为正则表达式，向前或者向后命令。

* History Interaction
像 bash 和其他 shell 一样，Eshell 对历史修改和交互也有支持。下面的内容描述了 Eshell 支持的大多数历史语法。

- =!!= 重复最后一次命令。
- =!ls= 重复最后一次以 =ls= 开头的命令。
- =!?ls= 重复最后一次包含 =ls= 的命令。
- =!ls:n= 从最后一次以 =ls= 开头的命令中提取第 n 个参数。
- =!ls<tab>= 使用 =pcomplete= ，展示 =ls= 的补全结果。
- =$_= 返回最后执行的命令的最后一个参数。

* Commandline Interaction
** The Eshell Prompt
可以通过修改 =eshell-prompt-function= 来自定义 Eshell 提示，这个函数定义了 Eshell 的提示应该包含什么。通过将提示配置放到 elisp 中，你几乎可以使用它进行任何操作。唯一的问题是，你得告诉 Eshell 提示符看起来是什么样子，因此你必须编辑变量 =eshell-prompt-regexp= ，以便 Eshell 知道提示符是什么。

** The Commandline
Eshell 支持使用 =\= 转移换行符，并以这种方式支持基本的多行输入。处理多行文字字符串的另一种方法是使用单引号，在单引号之中，你可以自由输入文本。如果使用双引号，Eshell 则会扩展 Subshell 命令并进行变量扩展。

由于 Eshell 的工作方式，你甚至可以返回并修改引号中输入的文本。

** Useful Keybindings
Eshell 配备了一套提升生活质量的改进，使得 Emacs 和 Eshell 的交互变得更加容易。

- =C-c M-b= 输入当前 buffer 名。
- =C-c M-i= 输入当前进程名。
- =C-c M-v= 输入当前环境变量名。
- =C-c M-d= 在直接输入和延迟输入之间切换。

* Argument Predicates
参数预测是一种快速过滤文件列表甚至是 elisp 函数列表的一种很酷的方法。预测语法基于 zsh 中的参数预测语法，所以你可以将大部分 zsh 上的经验使用到 Eshell 中。

与 Eshell 中其他领域不同，参数预测词在 Eshell 本身中进行了记录。你可以通过查看 =eshell-display-predicate-help= 和 =eshell-display-modifier-help= 来访问帮助文件。

过滤文件的全局列表非常有用，因为它免除了使用 =find= 或 =ls= 之类的工具工作的麻烦。
