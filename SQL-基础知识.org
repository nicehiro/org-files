#+HUGO_BASE_DIR: ~/Documents/hugo-static/
#+hugo_section: notes
#+hugo_auto_set_lstmod: t

#+TITLE: SQL 知识点总结

#+DATE: 2018-03-24
#+OPTIONS: toc:nil

* SQL 基础

** 查询
#+BEGIN_SRC sql
select * from Products;

select * from Products where id = '1' or id = '2';

select * from Products where id in ('1', '2');

select * from Products where not id = '1';

select * from Products where _name like 'Fish%'

select concat(name, ' (', country, ')') from Products;

select name as a, id as b from Products where ...;

select avg(price) as avg_price from Products;

select sum(price*numbers) from Products where name = 'haha';

select c1.id, c1.name from customers as c1, customers as c2 where c2.contact = 'james'

select vend_name, prod_name from Vendors inner join Products on Vendors.vend_id = Products.vend_id;
#+END_SRC

- 同时使用 and 和 or 时，需要使用圆括号保证优先级

- in：适配多个；可以在括号中填写其他 sql 语句；执行比 or 快

- like：通配符匹配， =%= 表示任意字符出现任意次数； =_= 匹配单个字符；

- concat：如上例子

- 支持 +、-、x、/ 四种运算

- 支持函数：upper(), length(), lower(), avg()（返回某一列的平均值）, count()（返回某一类的个数）, max()（某一列的最大值）, min(), sum()（返回某一的总和）, 

- distinct：排除某一列中相同的值

- 分组， =group by= 必须出现在 where 子句之后

- 过滤分组， =having= 必须出现在 group by 子句之后，和 where 差不多

- 排序， =order by= 出现在最后，可以输入多个字段

- 子查询， =in= 字段里可以插入新的查询

- 联结，多个表：使用 where 子句手动等值联结；或者使用 inner join ... on ... 也可等值联结

- 自联结，同一个表联结，可以赋予不同的 alias

- 外部联结，(left|right) outer join，会显示没有关联的行

- 组合查询，union，将多个查询结果拼接，当然首先需要查询字段相同

** 插入

#+BEGIN_SRC sql
insert into Customers values('', '', '', '');

insert into Customers(desp1, desp2, desp3) values('', '', '');
#+END_SRC

- 复制表结构
  =create table Customers_New like Customers;=

- 复制表数据
  =create table CustCopy as select * from Customers;=

** 更新

#+BEGIN_SRC sql
update Customers set email = '...', name='...' where id = '1';
#+END_SRC

** 删除

#+BEGIN_SRC sql
delete from Customers where id='1';

# 删除整个表
truncate table Customers;
#+END_SRC

** 表操作

#+BEGIN_SRC
# 创建表
create table Temp (
id char(20) not null,
name char(20) not null,
...
);

# 更新表结构
alter table Vendors add vend_phone char(20);

# 删除列
alter table Vendors drop column vend_phone;

# 修改表某字段的数据类型
alter table Vendors modify vend_phone char(20);

# 修改表某字段为另一字段
alter table Vendors change vend_phone haha int;

# 修改字段默认值
alter table Vendors alter vend_phone set default 100;

# 删除字段默认值
alter table Vendors alter vend_phone drop default 100;

# 修改数据库引擎
alter table Vendors engine=myisam;

# 删除表
drop table CustCopy;

# 重命名
rename table Vendors to vendor;
alter table Vendors rename to haha;
#+END_SRC

** 视图

#+BEGIN_SRC
create view Temp as select ...;
#+END_SRC

** 事务
事务用于处理大量的数据操作，具有原子性（事务不可分割）、一致性（事务开始前后，数据库的完整性没有被破坏）、隔离性（防止多个并行事务操作导致数据的不一致）、持久性（事务结束后对数据库的改变是永久的）。
默认情况下，事务的 commit 操作是默认执行的，可以设置 =set autocommit = 0= 关闭自动提交。
#+BEGIN_SRC sql
begin;
commit;
rollback;  # 回滚
savepoint identifier;  # 设置回滚点
rollback to identifier;   # 回滚到固定回滚点
#+END_SRC

** 连接
=inner join ... on= 就是执行等值链接，两个表中有相同字段的行才会显示； =right join ... on= 右连接，右边表的数据全部都有，对应左边的如果没有设为 null；同理，左连接同右连接。

** 索引
先简单说一下索引的结构，具体的使用以及优化之后研究过再详细讨论，因为目前还没有接触过一例索引相关的 SQL 操作。
索引就像是书的目录，可以加快数据库查询等操作。索引保存在数据结构中，一般只包含索引和主键，以索引为序，排在 B+ 树或者其他排好序的数据结构中。如果需要查询，直接搜索索引即可。
