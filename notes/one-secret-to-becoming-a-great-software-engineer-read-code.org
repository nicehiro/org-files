#+TITLE: 成为杰出程序员的秘密——阅读源码
#+DATE: 2021-01-04
#+OPTIONS: toc:nil
#+SETUPFILE: ~/.emacs.d/org-templates/level-1.org
#+STARTUP: latexpreview

#+begin_quote
摘抄于：[[https://hackernoon.com/one-secret-to-becoming-a-great-software-engineer-read-code-467e31f243b0][One secret to becoming a great software engineer: read code]]
#+end_quote

* Why 为什么要去阅读源码？
1. 读别人优秀的代码，你可以学习到这门语言新的语法功能和不同的编码习惯。
2. 读你的依赖库代码，可以让你
   - 知道这个库是如何运作的
   - 知道这个库的缺陷
   - 当遇到问题时可以快速定位
3. 读的越多，你就越容易去在别人的代码上进行修改，而不是只会重写（只能看懂自己的代码，无法很好的交接项目）。

#+begin_quote
[reading code] is really worth it for what it builds in your brain.
The more you learn to read other people’s stuff, the more able you are to invent your own in the future …

—— Donald Knuth
#+end_quote

* How 如何去阅读源码？
1. *从头到尾的读* 会让你不了解上下文背景（为什么要有这个方法？），没有一个完整的大局观。
2. *被动阅读* 只读不写（测试用例等）不会真正参与到源码中，收获也不会高。

阅读源码的 4 步方法：

** Run
阅读代码的第一步不是去读代码，而是去用代码。
只有在你了解这个库是干什么用的，提供了什么接口，实现了什么功能，
才能去读它的代码。

** Examine Structure
这一步是和读书过程最不一样的地方。你不需要像读书一样从头开始一步一步去读，
而是在代码中不停的跳转来阅读你想要了解的地方。

首先，你可以运用一些自动化工具，像 =cloc= ， =tree= 这种工具了解源码的大致解构。
然后，通过使用 [[https://github.com/gilesbowkett/rewind?ref=hackernoon.com][其他工具]] 查看被修改最多的文件来确定一些关键文件。
通过查看重要的集成测试，列出所调用的函数，将这些测试标记方便以后阅读。

** Dive in
阅读代码时需要注意：动作被创建的地方，用到的一些数据结构等。

从关键的集成测试中选择几个重要的测试流程，然后开始从顶部深入这个流程。
可以通过断点的方式，也可以化 UML 图来走完这个流程。

可以在一些重要函数中打断点，然后浏览堆栈信息查看是如何到达某个地方的。
另外，编辑器支持定义跳转和引用跳转也是非常有用的。
在这个过程中如果遇到一些特殊的数据结构，不妨去看看它到底是如何实现的。

除了集成测试外，查看 PRs 也是迅速了解代码做了什么事的方法。
PRs 一般不会很复杂，它会描述这次代码提交实现了什么。

阅读源码的过程中，我会开两个笔记。
第一个笔记记录这个语言的新语法，新的实现方式用来提高编码能力。
第二个笔记记录我对这个仓库困惑的地方，可以改进的地方。

** Write test
1. 写测试用例。
2. 解决一些小 bug

* What 该选择阅读哪些源码？
1. 读目前写代码依赖的仓库
2. 读依赖仓库的依赖
3. 读一些和自己每天使用语言的不同代码的源码
