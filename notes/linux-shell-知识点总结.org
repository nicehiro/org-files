#+TITLE: Linux Shell 知识点总结
#+SETUPFILE: ~/.emacs.d/org-templates/level-1.org
#+DATE: 2018-03-22
#+OPTIONS: toc:nil

为春招做准备。知识点从《Linux Shell 脚本攻略》和网上一些博客中总结。
一下脚本使用 bash 执行，使用其他 sh 可能会有不同输出！

** 基础知识
- =$= & =#= 如果是默认未被修改过的 bash， =$= 表示普通用户； =#= 表示 root 用户

- shebang：行话，即 =#!/bin/bash= ，shell 文件开头添加，可以确定脚本由谁来执行
  
- echo 的用法： ='= 中包含字符都无特殊含义； ="= 中包含字符可以有特殊含义
  echo 默认会添加换行符在字符串结尾
  #+BEGIN_SRC sh
  echo hello      # right
  echo 'hello'    # right
  echo "hello"    # right

  echo "hello\!"  # 转义
  echo hello!     # 直接打"
  echo 'hello!'   # 也正确
  
  echo $USER
  echo ${USER}
  #+END_SRC

- printf：类似 c 中的用法
  #+BEGIN_SRC sh
  printf "%s haha %-4.2f" hiro 23.9898
  => hiro haha 23.99
  #+END_SRC
  
- 赋值，不可添加空格！切记
  #+BEGIN_SRC sh
  GOD="hiro"    # right
  GOD = "hiro"  # wrong
  #+END_SRC
  
- =let= , =[]= 可以执行基本的算术操作
  #+BEGIN_SRC sh
  let a=1+2
  result=$[ 1+2 ]
  #+END_SRC
  
- 文件描述符，0 -- stdin；1 -- stdout；2 -- stderr
  =>= 输入； =>>= 追加； =2>= 错误信息输入

- alias：别名
  #+BEGIN_SRC sh
  alias install='sudo pacman -S'
  #+END_SRC
  
- 时间：date
  #+BEGIN_SRC sh
  date
  date +%s     # 纪元时
  #+END_SRC
  
- 数组一般使用 =()= ，里面放入元素直接生成；也可以使用下标来调用元素（默认从 1 开始）
  #+BEGIN_SRC sh
  → echo $array
  1 2 3 4 test1
  → echo ${array[1]}
  1
  → echo ${#array[*]}
  5
  #+END_SRC
  
- 关联列表 使用 ={[]='' []=''}= 这个形式。
  #+BEGIN_SRC sh
  [hiro@hiro-pc ~]$ declare -A temp
  [hiro@hiro-pc ~]$ temp=([apple]=100 [orange]=50)
  [hiro@hiro-pc ~]$ echo $temp
  
  [hiro@hiro-pc ~]$ echo ${temp[apple]}
  100
  [hiro@hiro-pc ~]$ echo ${temp[orange]}
  50
  [hiro@hiro-pc ~]$ temp[pear]=80
  [hiro@hiro-pc ~]$ echo ${temp[pear]}
  80
  [hiro@hiro-pc ~]$ echo ${!temp[*]}    # 拿索引
  apple orange pear
  #+END_SRC
  
- 函数与参数
  函数可以这样定义（function 可去）：
  #+BEGIN_SRC sh
  function fname()
  {}
  #+END_SRC
  传参数时像在外面打命令一样传。
  函数内部对参数的访问：
  - $1 $2 表示传入的第几个参数
  - $@ 以列表的方式打印所有参数 "$1" "$2" ...
  - $* 同上，但每个参数作为单独实体 "$1c$2c..." 
    
- read：读入字符，可以查看文档来使用

- 内部字段分隔符：IFS，使用时先把原来的 IFS 保存，用过之后复原。

- 循环
  #+BEGIN_SRC sh
  for item in items:
  do
    ...
  done

  for (x=0; x<10; i++)
  {}

  while true:
  do
    ...
  done
  #+END_SRC
  
- 比较： 只有 if 子句之后需要加 =;=
  #+BEGIN_SRC sh
  if conditions;
  then
    ...;
  else if conditions;
  then
    ...;
  else
    ...;
  fi
  #+END_SRC

** Tips
- null 字符使用 =\0= 表示

- =echo $?= 会返回上一个命令执行的状态，0 表示正常执行，其他都是非正常执行，127 执行出错
  
- 反引用，和 =$()= 作用一样，用于存储命令输出，相当于生成一个子 shell，在其中操作不会影响到外部独立进程。如果将子 shell 的输出保存到变量中，是以 =''= 的方式保存的，所以里面的 =\n= 不会转型，使用 =""= 包起来可以是特殊字符转型。
  
*** 调试脚本
使用 =bash -x script.sh= 来调试脚本，会运行打印每一行命令以及当前状态；也可以使用 =set -x= 与 =set +x= 将需要调试的代码包起来；也可以直接修改 shebang =#!/bin/bash -xv= 来调试

*** 各文件夹的作用
- /etc 存放系统配置文件

- /bin 存放二进制脚本文件

- /proc 虚拟目录，用来查看系统运行内存的信息

- /lib 共享文件目录，存放许多程序运行所必须的文件

- /dev 设备目录，linux 理念之一：一切皆文件
  

